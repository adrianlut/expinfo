#!/usr/bin/env python3

import asyncio
from collections import defaultdict
import json
import traceback
import os
import config

try:
    from asyncio.exceptions import IncompleteReadError
except ModuleNotFoundError: # for python3.7
    from asyncio.streams import IncompleteReadError


from utils import bcolors
import hooks




class KVStore:
    def __init__(self):
        self.__db = {}

    def insert(self, key, value):
        if key in self.__db:
            raise Exception(f'Key: {key} already exists')
        self.__db[key] = value

    def update(self, key, value):
        if key not in self.__db:
            raise Exception(f'Key: {key} does not exist')
        if isinstance(self.__db[key], dict):
            self.__db[key].update(value)
            return
        self.__db[key] = value

    def read(self):
        return self.__db

    def delete(self, key):
        if key not in self.__db:
            raise Exception(f'Key: {key} does not exist')
        del self.__db[key]

    def delete_many(self, keys):
        for k in keys:
            if k not in self.__db:
                continue
            del self.__db[k]


class UndoLog:
    def __init__(self, db):
        self.__db = db
        self.__keys = set()

    def add(self, msg):
        if msg['method'] in ['insert']:
            self.__keys.add(msg['key'])

    def undo(self):
        if self.__keys:
            print(f'deleting entries: {self.__keys}')
            self.__db.delete_many(self.__keys)




class Daemon(dict):
    def __init__(self):
        self.db = KVStore()
        self.__hooks = []


    def add_hook(self, hook):
        self.__hooks.append(hook)
        hook.update()

    async def handle_msg(self, log, msg, send):
        ret = None
        try:
            fn = getattr(self.db, msg['method'])
            kwargs = {x: msg[x]
                      for x in fn.__code__.co_varnames if x != 'self'}
            ret = fn(**kwargs)
            log.add(msg)
        except Exception as e:
            print(traceback.format_exc())
            await send({'error': traceback.format_exc(limit=0)})
            return

        if ret is None:
            await send({'error': None})
        else:
            await send(ret)

        for hook in self.__hooks:
            try:
                hook.update(msg)
            except:
                pass

    async def handle(self, reader, writer):
        addr = writer.get_extra_info('peername')
        print(f'Connection from: {addr[0]}:{addr[1]}')
        log = UndoLog(self.db)

        async def send(msg):
            if writer.is_closing():
                return False
            j = json.dumps(msg)
            print(f'Send: {j}')
            writer.write(j.encode())
            writer.write(b'\n')
            try:
                await writer.drain()
            except ConnectionResetError:
                return False
            return True

        while True:
            try:
                data = await reader.readuntil(separator=b'\n')
            except (IncompleteReadError, ConnectionResetError, BrokenPipeError):
                break

            try:
                msg = json.loads(data[:-1])
            except json.decoder.JSONDecodeError:
                await send({'error': 'json.decoder.JSONDecodeError'})
                break

            print(f'Received {msg} from {addr[0]}:{addr[1]}')
            await self.handle_msg(log, msg, send)

        writer.close()
        try:
            await writer.wait_closed()
        except BrokenPipeError:
            pass
        print(f'Closed connection: {addr[0]}:{addr[1]}')

        # on disconnect remove all inserted data items
        log.undo()
        for hook in self.__hooks:
            hook.update()


daemon = Daemon()


for Hook in hooks.ACTIVE:
    daemon.add_hook(Hook(daemon.db))


loop = asyncio.get_event_loop()
coro = asyncio.start_server(
    daemon.handle, config.DAEMON_IP, config.DAEMON_PORT, loop=loop)
server = loop.run_until_complete(coro)

# Serve requests until Ctrl+C is pressed
addr = server.sockets[0].getsockname()
print(f'Serving on: {addr[0]}:{addr[1]}')
try:
    loop.run_forever()
except KeyboardInterrupt:
    pass

# Close the server
server.close()
loop.run_until_complete(server.wait_closed())
loop.close()
